
day 22
복습 -> 제약조건 -> 무결성 -> 모델링 -> 정규화 -> 시퀀스

=========================================================================================
1. 제약조건
1) PRIMARY KEY(PK)
고유한 값이며 각 행의 구분점으로 사용된다.
중복이 없고 NULL값을 허용하지 않는다.
-----------------------------------------------------------------------------------------
2) FOREIGN KEY(FK)
다른 테이블의 PK를 사용하며 중복이 가능하다.
보통 테이블끼리 관계를 맺을 때 사용한다.
NULL값은 허용되지만 사용하지 말 것.
-----------------------------------------------------------------------------------------
3) UNIQUE KEY(UK)
NULL값은 허용하지만 중복은 허용하지 않음.

TBL_USER
회원번호(PK)	이름	나이 	아이디(UK)
1		짱구	5	JG
2		철수	5	CS
3		치타	6	CT
4		유리	5	YL


TBL_BORAD
게시글번호(PK)	제목	내용		회원번호(FK)
1		DBMS	재밌다		1	
2		JAVA	컬렉션어렵다	2
-----------------------------------------------------------------------------------------
+) 제약조건 정의 방법
	- 컬럼 레벨 정의 : 하나의 컬럼을 정의하면서 같이 정의
	- 테이블 레벨 정의 : CREATE 쿼리 마지막에 정의
	- NOT NULL 제약조건 : 컬럼 레벨 정의만 가능하다.
	- 제약조건 이름을 쓸 때는 
	테이블명_컬럼명_제약조건명 OR 시스템구분_테이블명_제약조건명 으로 사용한다.
-----------------------------------------------------------------------------------------
+) 데이터 베이스 명명 규칙(테이블, 컬럼명 작성시 주의사항)
	이름은 중복 불가
	문자로 시작해야한다.
	특수문자는 언더바(_), 달러($), 샵(#) 사용가능
	예약어는 사용 불가능.
	공백 사용 불가능.
	최대 30글자까지만 가능.
-----------------------------------------------------------------------------------------
4) NOT NULL 
NULL을 허용하지 않는다는 의미임.
-----------------------------------------------------------------------------------------
5) CHECK(컬럼명 = 값1, 컬럼명 = 값2, ...) OR CHECK(컬럼명 IN (값1, 값2, ...))
특정 컬럼에 특정값만 허용하고 싶을 때 사용하는 제약조건이다.	
원하는 특정값이 들어왔는지 체크한다.
특정 값 목록 중 하나만 허용할 때 => CHECK(컬럼 IN ('값1', '값2', ...))
값을 직접 비교할 때는 => CHECK(컬럼 = '값')
복합조건을 비교할 때는 => CHECK((조건1) OR / AND (조건2))
여러컬럼을 동시에 비교할 때는 => CHECK((A='X' AND B='Y') OR (A='값1' AND B='값2'))
-----------------------------------------------------------------------------------------
6) DEFAULT 제약조건
기본값을 넣어줄 수 있다.
컬럼명 데이터타입 DEFAULT 기본값

ALTER TABLE 테이블명 MODIFY 컬럼명 DEFAULT 기본값; => DEFAULT 제약조건을 추가할땐 ADD CONSTRAINT를 쓰는게 아님.

-----------------------------------------------------------------------------------------
7) 조합키(복합키)
두개 이상의 컬럼을 하나의 KEY로 지정하는것을 의미.
테이블에 한개의 PK만 존재할 수 있지만 조합키를 사용하면 두 개 이상의 컬럼을 하나의 PK로 사용할 수 있게된다.

=========================================================================================
2. 무결성
데이터의 결함이 없다. => 데이터의 정확성, 일관성, 유효성이 유지되는 것을 의미한다.
-----------------------------------------------------------------------------------------
1) 데이터의 정확성
데이터는 애매하면 안된다.
제품 색상이 들어가는 데이터에 => 보라색같기도 한 빨간색 => 명확하지 않다.
=> 버건디 => 명확한 색상명 사용.
-----------------------------------------------------------------------------------------
2) 데이터의 일관성
각 사용자가 일관된 데이터를 볼 수 있도록 해야한다.
고객이 회원가입을 하면 고객 테이블이 생기고,
주문하면 주문테이블이 생긴다.
고객 정보가 고객 테이블에서는 LEE로,
주문 테이블에서는 HONG으로 저장되어있다면 일관성이 지켜지지 않은것이다.

※모든 테이블에서 같은 사용자는 같은 형식으로 기록되어야한다.
-----------------------------------------------------------------------------------------
3) 데이터의 유효성
데이터가 실제 존재하는(사실적인) 데이터여야한다.
국가 : 대한민국1, 대한민국2 => 국가 : 대한민국
결혼여부 : 미혼 => 결혼여부 : 기혼 

※데이터는 사실 기반이어야하며 거짓이나 가상의 값은 유효하지 않은 값이다.
=========================================================================================
3. 무결성의 3가지 종류
1) 개체 무결성(PRIMARY KEY)
 모든 테이블이 PK로 선택된 컬럼을 가져야한다.
 모든 테이블에 PK가 반드시 1개 존재해야한다.
 모든 행은 고유하게 식별되어야 하며, PK는 NULL값이 들어올 수 없다.
2) 참조 무결성(FOREIGN KEY)
 두개의 테이블의 데이터가 항상 일관된 값을 가지도록 유지하는 것을 의미한다.
 이 말은, 자식 테이블의 외래키는 부모 테이블의 기본키와 반드시 연결되어야한다.
3) 도메인 무결성(타입과 제약조건)
 컬럼의 타입, NULL값 허용 등에 대한 사항을 정의하고 올바른 데이터가 입력되었는지를 확인하는 것을 의미한다.
 이메일 컬럼에 숫자 123이 들어가거나,
 성별 컬럼에 ABC가 들어가는 상황이 바로 도메인 무결성이 깨진 상황이다.
 이메일 컬럼 => VARCHAR2, 성별 컬럼 => M/F, 남/여 등으로 구분해서 규칙을 명확하게 제약해야한다.
=========================================================================================
4. 모델링(기획)★★★

< 요구사항 분석 -> 개념적 설계 -> 논리적 설계 -> 물리적 설계 -> 구현 >

1) 요구사항 분석
	회원, 상품, 주문 3가지를 관리하려고 한다.
	- 회원은? => 이름,주소,핸드폰번호,생일,ID,PASSWD,EMAIL
	- 상품은? => 상품번호,상품명,가격,재고량
	- 주문은? => 회원번호,상품번호,회원ID,주문상태

2) 개념적 설계(개념 모델링)
	회원	상품	주문
	이름	상품번호	주문날짜
	ID	상품명	회원번호
	PW	가격	상품번호
	EMAIL	재고량	아이디
	생일		주문상태
	폰번호
=> 관계를 맺을지, 독립적으로 유지될지 생각하는 단계
=> 상위테이블/하위테이블을 생각한다.
	 회원은 회원정보만 있어도되고, 주문이나 상품정보를 넣을 필요가 없다.
	 상품은 상품정보만 있으면 된다.
 	 주문은 누가, 어떤것을 주문했는지 알고 있어야한다.(회원,상품)
=> 주문은 회원과 상품 모두를 알아야한다. => 회원,상품(상위테이블) / 주문(하위테이블)

※회원 1:N 주문 관계 => 한명의 회원이 여러건의 주문을 할 수 있다.
※상품 1:N 주문 관계 => 한 상품이 여러 주문에 포함될 수 있다.
※주문은 회원과 상품 사이의 다대다 관계를 해소한 중간엔티티라고 한다.


3) 논리적 설계(논리 모델링)
	
	회원		상품		주문
	이름[문자]	상품번호(PK)[숫자]	주문날짜[날짜]
	ID[문자]		상품명[문자]	회원번호[숫자]
	PW[문자]		가격[숫자]	상품번호[숫자]
	EMAIL[문자]	재고량[숫자]	주문상태[문자]
	생일[날짜]			주문번호(PK)[숫자]
	폰번호[문자]		
	회원번호(PK)[문자]

	NULL 허용하지만 중복은 허용하지 않는다
	여기서 PK로 사용할 것을 찾는다.
	회원 PK : 기존은 ID였으나, 주문에 회원번호가 필요하므로 회원에 회원번호를 추가하고, 이를 PK로 사용한다.
	상품 PK : 상품번호
	주문 PK : 주문번호를 추가하고, 이를 PK로 사용한다.

	UK를 찾는다.(유일한 값, NULL 허용)
	회원 UK : ID,핸드폰번호
	NOT NULL : 비밀번호, 아이디, 핸드폰번호, 주소
	상품 UK : X
	NOT NULL : 상품명, 가격, 재고량 => NULL != 0
	주문 UK : X	
	NOT NULL : 주문날짜, 주문상태,

	FK를 찾는다
	주문 FK : 회원번호, 상품번호
-----------------------------------------------------------------------------------------
	1_ PK(PRIMARY KEY)
	고유한 값이며 각 행의 구분점으로 사용된다
	중복이 없고 NULL값을 허용하지 않는다

	2_ FK(FORIGN KEY)
	다른 테이블의 PK를 사용하며 중복 가능하다
	보통 다른 테이블끼리 관계를 맺을 때 사용한다
	NULL 허용하지만 권장하지 않는다

	3_ UK(UNIQUE KEY)	
-----------------------------------------------------------------------------------------
4) 물리적 설계(물리 모델링)

	회원		상품		주문
	이름[문자]	상품번호(PK)[숫자]	주문날짜[날짜]
	ID[문자]		상품명[문자]	회원번호[숫자]
	PW[문자]		가격[숫자]	상품번호[숫자]
	EMAIL[문자]	재고량[숫자]	주문상태[문자]
	생일[날짜]			주문번호(PK)[숫자]
	폰번호[문자]		
	회원번호(PK)[문자]

회원테이블(TBL_USER)
USER_NUMBER	NUMBER : PRIMARY KEY
-------------------------------------
USER_ID		VARCHAR2(100)
USER_PW		VARCHAR2(100)
USER_ADDRESS	VARCHAR2(100)
USER_BIRTH	DATE
USER_PHONE	VARCHAR2(14)
USER_NAME	VARCHAR2(10)
-------------------------------------
5) 구현
물리적설계를 보면서 코드를 직접 작성하는 단계이다.
-----------------------------------------------------------------------------------------

[모델링 예제1]
요구사항분석 -> 개념적설계 -> 논리적설계 -> 물리적설계 -> 구현

1. 요구사항분석
	핸드폰과 핸드폰케이스를 판매한다.
	핸드폰을 구매하면 핸드폰케이스도 같이 구매한다.
	핸드폰에는 제품번호, 색상, 사이즈, 가격, 제조일, 할인율이 포함된다.
	핸드폰케이스는 제품번호, 색상, 가격이 포함된다.
	핸드폰은 특정케이스만 같이 구입할 수 있다.
	(상위/하위테이블 결정하기) => 핸드폰이 상위 테이블, 핸드폰케이스가 하위 테이블
	
2. 개념모델링
	핸드폰		핸드폰케이스
	제품번호		제품번호
	색상		색상
	사이즈		가격
	가격
	제조일
	할인율
	
	(상위/하위테이블 결정하기) => 핸드폰이 상위 테이블, 핸드폰케이스가 하위 테이블

3. 논리모델링

	핸드폰		핸드폰케이스
	제품번호(PK)	제품번호(PK)
	색상		색상
	사이즈		가격
	가격		핸드폰제품번호(FK)
	제조일
	할인율

핸드폰 UK : 없음. => 유일한 개체는 없음
핸드폰의 NOT NULL : 가격, 사이즈, 제조일, 색상 => 반드시 존재해야함.
핸드폰의 DEFAULT : 가격, 제조일, 사이즈
핸드폰의 CHECK : 색상, 사이즈

핸드폰케이스 UK : 없음
NOT NULL : 가격, 색상
CHECK : 색상

4. 물리적설계
테이블명, 컬럼명, 자료형 등등

핸드폰 테이블명 : TBL_PHONE
PHONE_SERIAL_NUMBER NUMBER : PRIMARY KEY
---------------------------------------
PHONE_COLOR VARCHAR2(100),
PHONE_SIZE VARCHAR2(100),
PHONE_PRICE NUMBER,
PHONE_PRODUCTION_DATE DATE,
PHONE_SALE NUMBER


핸드폰케이스 테이블명 : TBL_PHONE_CASE
CASE_SERIAL_NUMBER NUMBER : PRIMARY KEY
---------------------------------------
CASE_COLOR VARCHAR2(100),
CASE_PRICE NUMBER,
PHONE_SERIAL_NUMBER NUMBER : FOREIGN KEY


+)모델링
	데이터베이스 시스템에서 데이터 구조와 관계를 설계하는 것을 의미.
요구사항분석 : 비즈니스 관점에서 정리.
	어떤 데이터를 관리할 것인지를 비즈니스 관점에서 정리한다.
개념모델링 : 엔티티를 도출하는 것을 의미함.
	현실세계에 존재하는 정보단위를 엔티티라고 한다.(ENTITY)
	엔티티를 사람이 이해할 수 있는 정보구조로 추상화하는 단계를 뜻한다.
논리모델링 : 데이터의 속성, 키, 엔티티들의 관계 정의
	개념 세계의 정보구조를 정보시스템이 이해할 수 있는 형태로 표현한 단계(실질적인 데이터 모델링 단계)
물리모델링 : 엔티티를 데이터베이스의 테이블로서 구현하는 것을 의미한다. 
	테이블/키/제약조건 등을 정의하는 단계이다.
	정보시스템 세계의 논리적 구조를 정보시스템이 처리할 수 있는 형태로 구조화하는 단계이다.
	이렇게 구조화된 결과는 데이터 스키마로 표현된다.
구현 : SQL문을 사용하여 테이블 생성 및 데이터를 삽입한다.
-----------------------------------------------------------------------------------------
개념적설계				논리적설계				물리적설계
엔티티(Entity)			릴레이션(Relation)		테이블(Table)
릴레이션(Relation)		릴레이션(Relation)		컬럼(Column)
속성(Attribution)		속성(Attribution),컬럼(Column)	행(Row)
주식별자(Main Identifier)		기본키(Primary Key)		기본키(PK, Primary Key)
외래식별자(Foreign Identifier)	외래키(Foreign Key)		외래키(FK, Foreign Key)
인스턴스(instance)		튜플(tuple),행(Row)		-
도메인(Domain)			도메인(Domain)			도메인(Domain)
-----------------------------------------------------------------------------------------
+) Relation : 테이블과 같은 개념, 튜플과 속성의 집합
+) Tuple : 릴레이션의 한 행, 레코드 한 개.
+) Attiribute : 릴레이션의 한 열, 컬럼 한 개.
+) Domain : 속성이 가질 수 있는 값의 범위
+) Degree : 릴레이션(테이블)의 속성(컬럼) 수
+) Cardinality : 릴레이션(테이블)의 튜플(행)의 수
+) Instance : 실제 릴레이션에 저장된 데이터(행)들의 집합
-----------------------------------------------------------------------------------------
+) 키 종류
기본키(Primary Key) : 각 튜플을 유일하게 식별할 수 있는 속성(들)
=> 기본키는 대표키이며, 중복과 null이 불가능하다.
후보키(Candidate Key) : 기본키가 될 수 있는 후보들, 중복 불가, Null 불가 => UK에 NOT NULL 설정. 
=> 후보키는 유일성과 최소성을 만족해야하며, 하나 이상의 후보키가 존재할 수 있다.
대체키(Alternate Key) : 후보키 중 기본키로 선택되지 않은 키.
=> 대체키도 후보키 중 하나이므로 유일성과 최소성(Not Null)을 만족해야한다.
외래키(Foreign Key) : 다른 릴레이션(테이블)의 기본키를 참조하는 속성. 릴레이션 간 관계를 맺을 때 사용.
슈퍼키(Super Key) : 튜플(행)을 유일하게 식별할 수 있는 모든 속성 집합, 후보키보다 크거나 같음.
=> 슈퍼키는 유일성만 만족하면 된다.(최소성은 만족하지 않아도 된다.) 
-----------------------------------------------------------------------------------------
유일성 = Uniqueness => UK : 릴레이션 내에서 키가 모든 튜플(행)을 구분할 수 있어야함.
			해당 속성에 대해서 중복이 없어야 한다는 의미이다.
최소성 = Minimality => Not NULL : 유일성을 만족하는 집합에서 불필요한 속성이 없어야함.
			속성을 하나라도 제거하면 유일성이 깨지는 가장 작은 속성 집합이어야함. [조합키]

학생 테이블
학번(Student_ID) 이름(Student_name)   이메일(Email)
20250611   짱구         gu@gmail.com
20250612   철수         su@gmail.com
20250613   유리         yuri@gmail.com

- 학번과 이메일은 유일한 값을 가짐 => 유일성O
- 이름은 중복될 수 있음 => 유일성X
- 학번   유일성O, 최소성O => 후보키
- 이름   유일성X, 최소성O => X
- 이메일 유일성O, 최소성O => 후보키
- 학번, 이메일 유일성O, 최소성X(학번하나만으로도 가능)   => 슈퍼키
-----------------------------------------------------------------------------------------
+) 무결성(Integrity)
데이터의 정확성, 일관성, 유효성 유지
	개체무결성 : 각 테이블에 고유 식별자인 PK가 필요하다.
	참조무결성 : FK는 존재하는 PK만 참조가능하다.
	도메인무결성 : 데이터타입, NULL, CHECK 등을 통한 값 제한
-----------------------------------------------------------------------------------------
5.정규화(Normalization)
DDL, DML에 대한 개념이 잡혀있어야한다.
정규화란 테이블의 컬럼을 무엇을 넣어야할지,
하나의 테이블로 쓸지, 두개로 분리하여 사용할지 결정하는 작업이다.
앞서 무결성의 특징으로 3가지를 보았다.(정확성,일관성,유효성)
이 세가지의 무결성을 지켜도 정규화 작업이 수행되지 않으면,
나중에 테이블 간 문제가 생길 수 있다.
1차~6차 정규화까지 분리하여 진행하지만, 보통 3차까지만 진행한다.(정규화는 테이블을 분리하는 작업)

(1) 데이터베이스에서 정규화가 필요한 이유
	데이터베이스를 잘못 설계하면, 불필요한 데이터 중복으로 인해 공간이 낭비된다.
	이 현상을 이상현상(Anomaly)이라고 한다.
	이상현상에는 세가지가 존재한다.
- 이상현상 : ??????
-----------------------------------------------------------------------------------------
[모델링 과제]

회원 테이블명 : TBL_USER

-------------------------




책 테이블명 : TBL_BOOK















